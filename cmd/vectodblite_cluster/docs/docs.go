// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2018-12-26 16:51:31.554555928 +0800 CST m=+0.023762650

package docs

import (
	"bytes"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "description": "This is a VectoDBLite cluster server.",
        "title": "VectoDBLite Cluster API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/infinivision/vectodb/issues",
            "email": "yuzhichang@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "{{.Host}}",
    "basePath": "/api/v1",
    "paths": {
        "/api/v1/add": {
            "post": {
                "description": "Add a vector to the given vectodblite",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "ReqAdd. If xid is 0 or ^uint64(0), the cluster will generate one.",
                        "name": "add",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/main.ReqAdd"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RspAdd",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/main.RspAdd"
                        }
                    },
                    "300": {
                        "description": "redirection"
                    },
                    "400": {}
                }
            }
        },
        "/api/v1/search": {
            "post": {
                "description": "Search a vector in the given vectodblite",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "ReqSearch",
                        "name": "search",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/main.ReqSearch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RspSearch",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/main.RspSearch"
                        }
                    },
                    "300": {
                        "description": "redirection"
                    },
                    "400": {}
                }
            }
        }
    },
    "definitions": {
        "main.ReqAdd": {
            "type": "object",
            "properties": {
                "dbID": {
                    "type": "integer"
                },
                "xb": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "xid": {
                    "type": "integer"
                }
            }
        },
        "main.ReqSearch": {
            "type": "object",
            "properties": {
                "dbID": {
                    "type": "integer"
                },
                "xq": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            }
        },
        "main.RspAdd": {
            "type": "object",
            "properties": {
                "err": {
                    "type": "string"
                },
                "xid": {
                    "type": "integer"
                }
            }
        },
        "main.RspSearch": {
            "type": "object",
            "properties": {
                "distance": {
                    "type": "number"
                },
                "err": {
                    "type": "string"
                },
                "xid": {
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo swaggerInfo

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
